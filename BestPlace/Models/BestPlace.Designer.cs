//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Comment_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Comment), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Profile_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Profile", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(BestPlace.Models.bp_Profile), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Place_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Place), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Place_bp_Category", "bp_Category", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.bp_Category), "bp_Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Place), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Comment_bp_Place", "bp_Place", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.bp_Place), "bp_Comment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Comment), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Photo_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Photo", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Photo), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Location_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Location", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Location), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Arrived_aspnet_Users", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.aspnet_Users), "bp_Arrived", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Arrived), true)]
[assembly: EdmRelationshipAttribute("BestPlaceModel", "FK_bp_Arrived_bp_Place", "bp_Place", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(BestPlace.Models.bp_Place), "bp_Arrived", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(BestPlace.Models.bp_Arrived), true)]

#endregion

namespace BestPlace.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class BestPlaceEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new BestPlaceEntities object using the connection string found in the 'BestPlaceEntities' section of the application configuration file.
        /// </summary>
        public BestPlaceEntities() : base("name=BestPlaceEntities", "BestPlaceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new BestPlaceEntities object.
        /// </summary>
        public BestPlaceEntities(string connectionString) : base(connectionString, "BestPlaceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new BestPlaceEntities object.
        /// </summary>
        public BestPlaceEntities(EntityConnection connection) : base(connection, "BestPlaceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<aspnet_Users> aspnet_Users
        {
            get
            {
                if ((_aspnet_Users == null))
                {
                    _aspnet_Users = base.CreateObjectSet<aspnet_Users>("aspnet_Users");
                }
                return _aspnet_Users;
            }
        }
        private ObjectSet<aspnet_Users> _aspnet_Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Category> bp_Category
        {
            get
            {
                if ((_bp_Category == null))
                {
                    _bp_Category = base.CreateObjectSet<bp_Category>("bp_Category");
                }
                return _bp_Category;
            }
        }
        private ObjectSet<bp_Category> _bp_Category;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Comment> bp_Comment
        {
            get
            {
                if ((_bp_Comment == null))
                {
                    _bp_Comment = base.CreateObjectSet<bp_Comment>("bp_Comment");
                }
                return _bp_Comment;
            }
        }
        private ObjectSet<bp_Comment> _bp_Comment;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Profile> bp_Profile
        {
            get
            {
                if ((_bp_Profile == null))
                {
                    _bp_Profile = base.CreateObjectSet<bp_Profile>("bp_Profile");
                }
                return _bp_Profile;
            }
        }
        private ObjectSet<bp_Profile> _bp_Profile;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Place> bp_Place
        {
            get
            {
                if ((_bp_Place == null))
                {
                    _bp_Place = base.CreateObjectSet<bp_Place>("bp_Place");
                }
                return _bp_Place;
            }
        }
        private ObjectSet<bp_Place> _bp_Place;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Photo> bp_Photo
        {
            get
            {
                if ((_bp_Photo == null))
                {
                    _bp_Photo = base.CreateObjectSet<bp_Photo>("bp_Photo");
                }
                return _bp_Photo;
            }
        }
        private ObjectSet<bp_Photo> _bp_Photo;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Location> bp_Location
        {
            get
            {
                if ((_bp_Location == null))
                {
                    _bp_Location = base.CreateObjectSet<bp_Location>("bp_Location");
                }
                return _bp_Location;
            }
        }
        private ObjectSet<bp_Location> _bp_Location;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Like> bp_Like
        {
            get
            {
                if ((_bp_Like == null))
                {
                    _bp_Like = base.CreateObjectSet<bp_Like>("bp_Like");
                }
                return _bp_Like;
            }
        }
        private ObjectSet<bp_Like> _bp_Like;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<bp_Arrived> bp_Arrived
        {
            get
            {
                if ((_bp_Arrived == null))
                {
                    _bp_Arrived = base.CreateObjectSet<bp_Arrived>("bp_Arrived");
                }
                return _bp_Arrived;
            }
        }
        private ObjectSet<bp_Arrived> _bp_Arrived;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the aspnet_Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToaspnet_Users(aspnet_Users aspnet_Users)
        {
            base.AddObject("aspnet_Users", aspnet_Users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Category EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Category(bp_Category bp_Category)
        {
            base.AddObject("bp_Category", bp_Category);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Comment EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Comment(bp_Comment bp_Comment)
        {
            base.AddObject("bp_Comment", bp_Comment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Profile EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Profile(bp_Profile bp_Profile)
        {
            base.AddObject("bp_Profile", bp_Profile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Place EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Place(bp_Place bp_Place)
        {
            base.AddObject("bp_Place", bp_Place);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Photo EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Photo(bp_Photo bp_Photo)
        {
            base.AddObject("bp_Photo", bp_Photo);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Location EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Location(bp_Location bp_Location)
        {
            base.AddObject("bp_Location", bp_Location);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Like EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Like(bp_Like bp_Like)
        {
            base.AddObject("bp_Like", bp_Like);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the bp_Arrived EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTobp_Arrived(bp_Arrived bp_Arrived)
        {
            base.AddObject("bp_Arrived", bp_Arrived);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<bp_Category> bp_Category_GetAll()
        {
            return base.ExecuteFunction<bp_Category>("bp_Category_GetAll");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<bp_Category> bp_Category_GetAll(MergeOption mergeOption)
        {
            return base.ExecuteFunction<bp_Category>("bp_Category_GetAll", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        public int bp_Category_PlusViews(Nullable<global::System.Int32> categoryId)
        {
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("bp_Category_PlusViews", categoryIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="commentId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        /// <param name="content">No Metadata Documentation available.</param>
        public int bp_Comment_Create(ObjectParameter commentId, Nullable<global::System.Guid> userId, Nullable<global::System.Guid> placeId, global::System.String content)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("content", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Comment_Create", commentId, userIdParameter, placeIdParameter, contentParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="commentId">No Metadata Documentation available.</param>
        public int bp_Comment_Delete(Nullable<global::System.Guid> commentId)
        {
            ObjectParameter commentIdParameter;
            if (commentId.HasValue)
            {
                commentIdParameter = new ObjectParameter("commentId", commentId);
            }
            else
            {
                commentIdParameter = new ObjectParameter("commentId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Comment_Delete", commentIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Comment> bp_Comment_GetByPlace(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Comment>("bp_Comment_GetByPlace", placeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Comment> bp_Comment_GetByPlace(Nullable<global::System.Guid> placeId, MergeOption mergeOption)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Comment>("bp_Comment_GetByPlace", mergeOption, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="photoId">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="path">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="descript">No Metadata Documentation available.</param>
        public int bp_Photo_Create(ObjectParameter photoId, Nullable<global::System.Guid> placeId, Nullable<global::System.Guid> userId, global::System.String path, global::System.String name, global::System.String descript)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter pathParameter;
            if (path != null)
            {
                pathParameter = new ObjectParameter("path", path);
            }
            else
            {
                pathParameter = new ObjectParameter("path", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            ObjectParameter descriptParameter;
            if (descript != null)
            {
                descriptParameter = new ObjectParameter("descript", descript);
            }
            else
            {
                descriptParameter = new ObjectParameter("descript", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Photo_Create", photoId, placeIdParameter, userIdParameter, pathParameter, nameParameter, descriptParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="photoId">No Metadata Documentation available.</param>
        public int bp_Photo_Delete(Nullable<global::System.Guid> photoId)
        {
            ObjectParameter photoIdParameter;
            if (photoId.HasValue)
            {
                photoIdParameter = new ObjectParameter("photoId", photoId);
            }
            else
            {
                photoIdParameter = new ObjectParameter("photoId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Photo_Delete", photoIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="photoId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Photo> bp_Photo_GetById(Nullable<global::System.Guid> photoId)
        {
            ObjectParameter photoIdParameter;
            if (photoId.HasValue)
            {
                photoIdParameter = new ObjectParameter("photoId", photoId);
            }
            else
            {
                photoIdParameter = new ObjectParameter("photoId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Photo>("bp_Photo_GetById", photoIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="photoId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Photo> bp_Photo_GetById(Nullable<global::System.Guid> photoId, MergeOption mergeOption)
        {
            ObjectParameter photoIdParameter;
            if (photoId.HasValue)
            {
                photoIdParameter = new ObjectParameter("photoId", photoId);
            }
            else
            {
                photoIdParameter = new ObjectParameter("photoId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Photo>("bp_Photo_GetById", mergeOption, photoIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Photo> bp_Photo_GetByPlace(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Photo>("bp_Photo_GetByPlace", placeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Photo> bp_Photo_GetByPlace(Nullable<global::System.Guid> placeId, MergeOption mergeOption)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Photo>("bp_Photo_GetByPlace", mergeOption, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="photoId">No Metadata Documentation available.</param>
        /// <param name="path">No Metadata Documentation available.</param>
        /// <param name="name">No Metadata Documentation available.</param>
        /// <param name="descript">No Metadata Documentation available.</param>
        public int bp_Photo_Update(Nullable<global::System.Guid> photoId, global::System.String path, global::System.String name, global::System.String descript)
        {
            ObjectParameter photoIdParameter;
            if (photoId.HasValue)
            {
                photoIdParameter = new ObjectParameter("photoId", photoId);
            }
            else
            {
                photoIdParameter = new ObjectParameter("photoId", typeof(global::System.Guid));
            }
    
            ObjectParameter pathParameter;
            if (path != null)
            {
                pathParameter = new ObjectParameter("path", path);
            }
            else
            {
                pathParameter = new ObjectParameter("path", typeof(global::System.String));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            ObjectParameter descriptParameter;
            if (descript != null)
            {
                descriptParameter = new ObjectParameter("descript", descript);
            }
            else
            {
                descriptParameter = new ObjectParameter("descript", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Photo_Update", photoIdParameter, pathParameter, nameParameter, descriptParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public int bp_Place_Delete(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Place_Delete", placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByCategory(Nullable<global::System.Int32> categoryId)
        {
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByCategory", categoryIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByCategory(Nullable<global::System.Int32> categoryId, MergeOption mergeOption)
        {
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByCategory", mergeOption, categoryIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetById(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetById", placeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetById(Nullable<global::System.Guid> placeId, MergeOption mergeOption)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetById", mergeOption, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="latitude">No Metadata Documentation available.</param>
        /// <param name="longitude">No Metadata Documentation available.</param>
        /// <param name="descript">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="address">No Metadata Documentation available.</param>
        /// <param name="webSite">No Metadata Documentation available.</param>
        public int bp_Place_Update(Nullable<global::System.Guid> placeId, Nullable<global::System.Int32> categoryId, global::System.String title, Nullable<global::System.Double> latitude, Nullable<global::System.Double> longitude, global::System.String descript, global::System.String phoneNumber, global::System.String address, global::System.String webSite)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("title", typeof(global::System.String));
            }
    
            ObjectParameter latitudeParameter;
            if (latitude.HasValue)
            {
                latitudeParameter = new ObjectParameter("latitude", latitude);
            }
            else
            {
                latitudeParameter = new ObjectParameter("latitude", typeof(global::System.Double));
            }
    
            ObjectParameter longitudeParameter;
            if (longitude.HasValue)
            {
                longitudeParameter = new ObjectParameter("longitude", longitude);
            }
            else
            {
                longitudeParameter = new ObjectParameter("longitude", typeof(global::System.Double));
            }
    
            ObjectParameter descriptParameter;
            if (descript != null)
            {
                descriptParameter = new ObjectParameter("descript", descript);
            }
            else
            {
                descriptParameter = new ObjectParameter("descript", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter addressParameter;
            if (address != null)
            {
                addressParameter = new ObjectParameter("address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("address", typeof(global::System.String));
            }
    
            ObjectParameter webSiteParameter;
            if (webSite != null)
            {
                webSiteParameter = new ObjectParameter("webSite", webSite);
            }
            else
            {
                webSiteParameter = new ObjectParameter("webSite", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Place_Update", placeIdParameter, categoryIdParameter, titleParameter, latitudeParameter, longitudeParameter, descriptParameter, phoneNumberParameter, addressParameter, webSiteParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="thirdPartyId">No Metadata Documentation available.</param>
        /// <param name="userName">No Metadata Documentation available.</param>
        /// <param name="avatar">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="birthday">No Metadata Documentation available.</param>
        /// <param name="gender">No Metadata Documentation available.</param>
        /// <param name="latitude">No Metadata Documentation available.</param>
        /// <param name="longitude">No Metadata Documentation available.</param>
        public int bp_Profile_Create(Nullable<global::System.Guid> userId, global::System.String thirdPartyId, global::System.String userName, global::System.String avatar, global::System.String email, global::System.String phoneNumber, Nullable<global::System.DateTime> birthday, Nullable<global::System.Boolean> gender, Nullable<global::System.Double> latitude, Nullable<global::System.Double> longitude)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter thirdPartyIdParameter;
            if (thirdPartyId != null)
            {
                thirdPartyIdParameter = new ObjectParameter("thirdPartyId", thirdPartyId);
            }
            else
            {
                thirdPartyIdParameter = new ObjectParameter("thirdPartyId", typeof(global::System.String));
            }
    
            ObjectParameter userNameParameter;
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("userName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("userName", typeof(global::System.String));
            }
    
            ObjectParameter avatarParameter;
            if (avatar != null)
            {
                avatarParameter = new ObjectParameter("avatar", avatar);
            }
            else
            {
                avatarParameter = new ObjectParameter("avatar", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("email", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter birthdayParameter;
            if (birthday.HasValue)
            {
                birthdayParameter = new ObjectParameter("birthday", birthday);
            }
            else
            {
                birthdayParameter = new ObjectParameter("birthday", typeof(global::System.DateTime));
            }
    
            ObjectParameter genderParameter;
            if (gender.HasValue)
            {
                genderParameter = new ObjectParameter("gender", gender);
            }
            else
            {
                genderParameter = new ObjectParameter("gender", typeof(global::System.Boolean));
            }
    
            ObjectParameter latitudeParameter;
            if (latitude.HasValue)
            {
                latitudeParameter = new ObjectParameter("latitude", latitude);
            }
            else
            {
                latitudeParameter = new ObjectParameter("latitude", typeof(global::System.Double));
            }
    
            ObjectParameter longitudeParameter;
            if (longitude.HasValue)
            {
                longitudeParameter = new ObjectParameter("longitude", longitude);
            }
            else
            {
                longitudeParameter = new ObjectParameter("longitude", typeof(global::System.Double));
            }
    
            return base.ExecuteFunction("bp_Profile_Create", userIdParameter, thirdPartyIdParameter, userNameParameter, avatarParameter, emailParameter, phoneNumberParameter, birthdayParameter, genderParameter, latitudeParameter, longitudeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Profile> bp_Profile_GetById(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Profile>("bp_Profile_GetById", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Profile> bp_Profile_GetById(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Profile>("bp_Profile_GetById", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="userName">No Metadata Documentation available.</param>
        /// <param name="email">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="birthday">No Metadata Documentation available.</param>
        /// <param name="gender">No Metadata Documentation available.</param>
        /// <param name="latitude">No Metadata Documentation available.</param>
        /// <param name="longitude">No Metadata Documentation available.</param>
        public int bp_Profile_Update(Nullable<global::System.Guid> userId, global::System.String userName, global::System.String email, global::System.String phoneNumber, Nullable<global::System.DateTime> birthday, Nullable<global::System.Boolean> gender, Nullable<global::System.Double> latitude, Nullable<global::System.Double> longitude)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter userNameParameter;
            if (userName != null)
            {
                userNameParameter = new ObjectParameter("userName", userName);
            }
            else
            {
                userNameParameter = new ObjectParameter("userName", typeof(global::System.String));
            }
    
            ObjectParameter emailParameter;
            if (email != null)
            {
                emailParameter = new ObjectParameter("email", email);
            }
            else
            {
                emailParameter = new ObjectParameter("email", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter birthdayParameter;
            if (birthday.HasValue)
            {
                birthdayParameter = new ObjectParameter("birthday", birthday);
            }
            else
            {
                birthdayParameter = new ObjectParameter("birthday", typeof(global::System.DateTime));
            }
    
            ObjectParameter genderParameter;
            if (gender.HasValue)
            {
                genderParameter = new ObjectParameter("gender", gender);
            }
            else
            {
                genderParameter = new ObjectParameter("gender", typeof(global::System.Boolean));
            }
    
            ObjectParameter latitudeParameter;
            if (latitude.HasValue)
            {
                latitudeParameter = new ObjectParameter("latitude", latitude);
            }
            else
            {
                latitudeParameter = new ObjectParameter("latitude", typeof(global::System.Double));
            }
    
            ObjectParameter longitudeParameter;
            if (longitude.HasValue)
            {
                longitudeParameter = new ObjectParameter("longitude", longitude);
            }
            else
            {
                longitudeParameter = new ObjectParameter("longitude", typeof(global::System.Double));
            }
    
            return base.ExecuteFunction("bp_Profile_Update", userIdParameter, userNameParameter, emailParameter, phoneNumberParameter, birthdayParameter, genderParameter, latitudeParameter, longitudeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="latitude">No Metadata Documentation available.</param>
        /// <param name="longitude">No Metadata Documentation available.</param>
        /// <param name="descript">No Metadata Documentation available.</param>
        /// <param name="phoneNumber">No Metadata Documentation available.</param>
        /// <param name="address">No Metadata Documentation available.</param>
        /// <param name="webSite">No Metadata Documentation available.</param>
        public int bp_Place_Create(Nullable<global::System.Guid> placeId, Nullable<global::System.Guid> userId, Nullable<global::System.Int32> categoryId, global::System.String title, Nullable<global::System.Double> latitude, Nullable<global::System.Double> longitude, global::System.String descript, global::System.String phoneNumber, global::System.String address, global::System.String webSite)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("title", typeof(global::System.String));
            }
    
            ObjectParameter latitudeParameter;
            if (latitude.HasValue)
            {
                latitudeParameter = new ObjectParameter("latitude", latitude);
            }
            else
            {
                latitudeParameter = new ObjectParameter("latitude", typeof(global::System.Double));
            }
    
            ObjectParameter longitudeParameter;
            if (longitude.HasValue)
            {
                longitudeParameter = new ObjectParameter("longitude", longitude);
            }
            else
            {
                longitudeParameter = new ObjectParameter("longitude", typeof(global::System.Double));
            }
    
            ObjectParameter descriptParameter;
            if (descript != null)
            {
                descriptParameter = new ObjectParameter("descript", descript);
            }
            else
            {
                descriptParameter = new ObjectParameter("descript", typeof(global::System.String));
            }
    
            ObjectParameter phoneNumberParameter;
            if (phoneNumber != null)
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
            }
            else
            {
                phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(global::System.String));
            }
    
            ObjectParameter addressParameter;
            if (address != null)
            {
                addressParameter = new ObjectParameter("address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("address", typeof(global::System.String));
            }
    
            ObjectParameter webSiteParameter;
            if (webSite != null)
            {
                webSiteParameter = new ObjectParameter("webSite", webSite);
            }
            else
            {
                webSiteParameter = new ObjectParameter("webSite", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Place_Create", placeIdParameter, userIdParameter, categoryIdParameter, titleParameter, latitudeParameter, longitudeParameter, descriptParameter, phoneNumberParameter, addressParameter, webSiteParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="categoryid">No Metadata Documentation available.</param>
        public ObjectResult<bp_Category> bp_Category_GetById(Nullable<global::System.Int32> categoryid)
        {
            ObjectParameter categoryidParameter;
            if (categoryid.HasValue)
            {
                categoryidParameter = new ObjectParameter("categoryid", categoryid);
            }
            else
            {
                categoryidParameter = new ObjectParameter("categoryid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Category>("bp_Category_GetById", categoryidParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="categoryid">No Metadata Documentation available.</param>
        public ObjectResult<bp_Category> bp_Category_GetById(Nullable<global::System.Int32> categoryid, MergeOption mergeOption)
        {
            ObjectParameter categoryidParameter;
            if (categoryid.HasValue)
            {
                categoryidParameter = new ObjectParameter("categoryid", categoryid);
            }
            else
            {
                categoryidParameter = new ObjectParameter("categoryid", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Category>("bp_Category_GetById", mergeOption, categoryidParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="locationId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="latitude">No Metadata Documentation available.</param>
        /// <param name="longitude">No Metadata Documentation available.</param>
        /// <param name="address">No Metadata Documentation available.</param>
        public int bp_Location_Create(ObjectParameter locationId, Nullable<global::System.Guid> userId, Nullable<global::System.Double> latitude, Nullable<global::System.Double> longitude, global::System.String address)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter latitudeParameter;
            if (latitude.HasValue)
            {
                latitudeParameter = new ObjectParameter("latitude", latitude);
            }
            else
            {
                latitudeParameter = new ObjectParameter("latitude", typeof(global::System.Double));
            }
    
            ObjectParameter longitudeParameter;
            if (longitude.HasValue)
            {
                longitudeParameter = new ObjectParameter("longitude", longitude);
            }
            else
            {
                longitudeParameter = new ObjectParameter("longitude", typeof(global::System.Double));
            }
    
            ObjectParameter addressParameter;
            if (address != null)
            {
                addressParameter = new ObjectParameter("address", address);
            }
            else
            {
                addressParameter = new ObjectParameter("address", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Location_Create", locationId, userIdParameter, latitudeParameter, longitudeParameter, addressParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="locationId">No Metadata Documentation available.</param>
        public int bp_Location_Delete(Nullable<global::System.Guid> locationId)
        {
            ObjectParameter locationIdParameter;
            if (locationId.HasValue)
            {
                locationIdParameter = new ObjectParameter("locationId", locationId);
            }
            else
            {
                locationIdParameter = new ObjectParameter("locationId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Location_Delete", locationIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetByUser(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetByUser", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetByUser(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetByUser", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetTop(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetTop", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetTop(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetTop", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="locationId">No Metadata Documentation available.</param>
        public int bp_Location_Update(Nullable<global::System.Guid> locationId)
        {
            ObjectParameter locationIdParameter;
            if (locationId.HasValue)
            {
                locationIdParameter = new ObjectParameter("locationId", locationId);
            }
            else
            {
                locationIdParameter = new ObjectParameter("locationId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Location_Update", locationIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public int bp_Like_Create(Nullable<global::System.Guid> objectId, Nullable<global::System.Guid> userId)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Like_Create", objectIdParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public int bp_Like_Delete(Nullable<global::System.Guid> objectId, Nullable<global::System.Guid> userId)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Like_Delete", objectIdParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Like> bp_Like_GetByObject(Nullable<global::System.Guid> objectId)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Like>("bp_Like_GetByObject", objectIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Like> bp_Like_GetByObject(Nullable<global::System.Guid> objectId, MergeOption mergeOption)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Like>("bp_Like_GetByObject", mergeOption, objectIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="objectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Like> bp_Like_GetByUserAndObject(Nullable<global::System.Guid> objectId, Nullable<global::System.Guid> userId)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Like>("bp_Like_GetByUserAndObject", objectIdParameter, userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="objectId">No Metadata Documentation available.</param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Like> bp_Like_GetByUserAndObject(Nullable<global::System.Guid> objectId, Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter objectIdParameter;
            if (objectId.HasValue)
            {
                objectIdParameter = new ObjectParameter("ObjectId", objectId);
            }
            else
            {
                objectIdParameter = new ObjectParameter("ObjectId", typeof(global::System.Guid));
            }
    
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("UserId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("UserId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Like>("bp_Like_GetByUserAndObject", mergeOption, objectIdParameter, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public int bp_Place_PlusView(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Place_PlusView", placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="photoId">No Metadata Documentation available.</param>
        public int bp_Photo_PlusView(Nullable<global::System.Guid> photoId)
        {
            ObjectParameter photoIdParameter;
            if (photoId.HasValue)
            {
                photoIdParameter = new ObjectParameter("photoId", photoId);
            }
            else
            {
                photoIdParameter = new ObjectParameter("photoId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Photo_PlusView", photoIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public int bp_Arrived_Create(Nullable<global::System.Guid> userId, Nullable<global::System.Guid> placeId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("bp_Arrived_Create", userIdParameter, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByUserId(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByUserId", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByUserId(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByUserId", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByUserPlace(Nullable<global::System.Guid> userId, Nullable<global::System.Guid> placeId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByUserPlace", userIdParameter, placeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByUserPlace(Nullable<global::System.Guid> userId, Nullable<global::System.Guid> placeId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByUserPlace", mergeOption, userIdParameter, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByArrived(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByArrived", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByArrived(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByArrived", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByPlaceId(Nullable<global::System.Guid> placeId)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByPlaceId", placeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="placeId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Arrived> bp_Arrived_GetByPlaceId(Nullable<global::System.Guid> placeId, MergeOption mergeOption)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Arrived>("bp_Arrived_GetByPlaceId", mergeOption, placeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requestStr">No Metadata Documentation available.</param>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_Search(global::System.String requestStr, Nullable<global::System.Int32> categoryId)
        {
            ObjectParameter requestStrParameter;
            if (requestStr != null)
            {
                requestStrParameter = new ObjectParameter("requestStr", requestStr);
            }
            else
            {
                requestStrParameter = new ObjectParameter("requestStr", typeof(global::System.String));
            }
    
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_Search", requestStrParameter, categoryIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="requestStr">No Metadata Documentation available.</param>
        /// <param name="categoryId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_Search(global::System.String requestStr, Nullable<global::System.Int32> categoryId, MergeOption mergeOption)
        {
            ObjectParameter requestStrParameter;
            if (requestStr != null)
            {
                requestStrParameter = new ObjectParameter("requestStr", requestStr);
            }
            else
            {
                requestStrParameter = new ObjectParameter("requestStr", typeof(global::System.String));
            }
    
            ObjectParameter categoryIdParameter;
            if (categoryId.HasValue)
            {
                categoryIdParameter = new ObjectParameter("categoryId", categoryId);
            }
            else
            {
                categoryIdParameter = new ObjectParameter("categoryId", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_Search", mergeOption, requestStrParameter, categoryIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="placeId">No Metadata Documentation available.</param>
        /// <param name="state">No Metadata Documentation available.</param>
        public int bp_Place_UpdateState(Nullable<global::System.Guid> placeId, Nullable<global::System.Int32> state)
        {
            ObjectParameter placeIdParameter;
            if (placeId.HasValue)
            {
                placeIdParameter = new ObjectParameter("placeId", placeId);
            }
            else
            {
                placeIdParameter = new ObjectParameter("placeId", typeof(global::System.Guid));
            }
    
            ObjectParameter stateParameter;
            if (state.HasValue)
            {
                stateParameter = new ObjectParameter("state", state);
            }
            else
            {
                stateParameter = new ObjectParameter("state", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("bp_Place_UpdateState", placeIdParameter, stateParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByUser(Nullable<global::System.Guid> userId)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByUser", userIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="userId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Place> bp_Place_GetByUser(Nullable<global::System.Guid> userId, MergeOption mergeOption)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Place>("bp_Place_GetByUser", mergeOption, userIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="locationId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetById(Nullable<global::System.Guid> locationId)
        {
            ObjectParameter locationIdParameter;
            if (locationId.HasValue)
            {
                locationIdParameter = new ObjectParameter("locationId", locationId);
            }
            else
            {
                locationIdParameter = new ObjectParameter("locationId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetById", locationIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="locationId">No Metadata Documentation available.</param>
        public ObjectResult<bp_Location> bp_Location_GetById(Nullable<global::System.Guid> locationId, MergeOption mergeOption)
        {
            ObjectParameter locationIdParameter;
            if (locationId.HasValue)
            {
                locationIdParameter = new ObjectParameter("locationId", locationId);
            }
            else
            {
                locationIdParameter = new ObjectParameter("locationId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<bp_Location>("bp_Location_GetById", mergeOption, locationIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="requestStr">No Metadata Documentation available.</param>
        public ObjectResult<bp_Profile> bp_Profile_Search(global::System.String requestStr)
        {
            ObjectParameter requestStrParameter;
            if (requestStr != null)
            {
                requestStrParameter = new ObjectParameter("requestStr", requestStr);
            }
            else
            {
                requestStrParameter = new ObjectParameter("requestStr", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<bp_Profile>("bp_Profile_Search", requestStrParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="requestStr">No Metadata Documentation available.</param>
        public ObjectResult<bp_Profile> bp_Profile_Search(global::System.String requestStr, MergeOption mergeOption)
        {
            ObjectParameter requestStrParameter;
            if (requestStr != null)
            {
                requestStrParameter = new ObjectParameter("requestStr", requestStr);
            }
            else
            {
                requestStrParameter = new ObjectParameter("requestStr", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<bp_Profile>("bp_Profile_Search", mergeOption, requestStrParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="userId">No Metadata Documentation available.</param>
        /// <param name="avatar">No Metadata Documentation available.</param>
        public int bp_Profile_UpdateAvatar(Nullable<global::System.Guid> userId, global::System.String avatar)
        {
            ObjectParameter userIdParameter;
            if (userId.HasValue)
            {
                userIdParameter = new ObjectParameter("userId", userId);
            }
            else
            {
                userIdParameter = new ObjectParameter("userId", typeof(global::System.Guid));
            }
    
            ObjectParameter avatarParameter;
            if (avatar != null)
            {
                avatarParameter = new ObjectParameter("avatar", avatar);
            }
            else
            {
                avatarParameter = new ObjectParameter("avatar", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("bp_Profile_UpdateAvatar", userIdParameter, avatarParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="aspnet_Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class aspnet_Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new aspnet_Users object.
        /// </summary>
        /// <param name="applicationId">Initial value of the ApplicationId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="loweredUserName">Initial value of the LoweredUserName property.</param>
        /// <param name="isAnonymous">Initial value of the IsAnonymous property.</param>
        /// <param name="lastActivityDate">Initial value of the LastActivityDate property.</param>
        public static aspnet_Users Createaspnet_Users(global::System.Guid applicationId, global::System.Guid userId, global::System.String userName, global::System.String loweredUserName, global::System.Boolean isAnonymous, global::System.DateTime lastActivityDate)
        {
            aspnet_Users aspnet_Users = new aspnet_Users();
            aspnet_Users.ApplicationId = applicationId;
            aspnet_Users.UserId = userId;
            aspnet_Users.UserName = userName;
            aspnet_Users.LoweredUserName = loweredUserName;
            aspnet_Users.IsAnonymous = isAnonymous;
            aspnet_Users.LastActivityDate = lastActivityDate;
            return aspnet_Users;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                OnApplicationIdChanging(value);
                ReportPropertyChanging("ApplicationId");
                _ApplicationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApplicationId");
                OnApplicationIdChanged();
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredUserName
        {
            get
            {
                return _LoweredUserName;
            }
            set
            {
                OnLoweredUserNameChanging(value);
                ReportPropertyChanging("LoweredUserName");
                _LoweredUserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LoweredUserName");
                OnLoweredUserNameChanged();
            }
        }
        private global::System.String _LoweredUserName;
        partial void OnLoweredUserNameChanging(global::System.String value);
        partial void OnLoweredUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobileAlias
        {
            get
            {
                return _MobileAlias;
            }
            set
            {
                OnMobileAliasChanging(value);
                ReportPropertyChanging("MobileAlias");
                _MobileAlias = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobileAlias");
                OnMobileAliasChanged();
            }
        }
        private global::System.String _MobileAlias;
        partial void OnMobileAliasChanging(global::System.String value);
        partial void OnMobileAliasChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAnonymous
        {
            get
            {
                return _IsAnonymous;
            }
            set
            {
                OnIsAnonymousChanging(value);
                ReportPropertyChanging("IsAnonymous");
                _IsAnonymous = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAnonymous");
                OnIsAnonymousChanged();
            }
        }
        private global::System.Boolean _IsAnonymous;
        partial void OnIsAnonymousChanging(global::System.Boolean value);
        partial void OnIsAnonymousChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastActivityDate
        {
            get
            {
                return _LastActivityDate;
            }
            set
            {
                OnLastActivityDateChanging(value);
                ReportPropertyChanging("LastActivityDate");
                _LastActivityDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastActivityDate");
                OnLastActivityDateChanged();
            }
        }
        private global::System.DateTime _LastActivityDate;
        partial void OnLastActivityDateChanging(global::System.DateTime value);
        partial void OnLastActivityDateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Comment_aspnet_Users", "bp_Comment")]
        public EntityCollection<bp_Comment> bp_Comment
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Comment>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "bp_Comment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Comment>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "bp_Comment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Profile_aspnet_Users", "bp_Profile")]
        public bp_Profile bp_Profile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Profile>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "bp_Profile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Profile>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "bp_Profile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bp_Profile> bp_ProfileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Profile>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "bp_Profile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bp_Profile>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "bp_Profile", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Place_aspnet_Users", "bp_Place")]
        public EntityCollection<bp_Place> bp_Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Place>("BestPlaceModel.FK_bp_Place_aspnet_Users", "bp_Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Place>("BestPlaceModel.FK_bp_Place_aspnet_Users", "bp_Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Photo_aspnet_Users", "bp_Photo")]
        public EntityCollection<bp_Photo> bp_Photo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Photo>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "bp_Photo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Photo>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "bp_Photo", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Location_aspnet_Users", "bp_Location")]
        public EntityCollection<bp_Location> bp_Location
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Location>("BestPlaceModel.FK_bp_Location_aspnet_Users", "bp_Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Location>("BestPlaceModel.FK_bp_Location_aspnet_Users", "bp_Location", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Arrived_aspnet_Users", "bp_Arrived")]
        public EntityCollection<bp_Arrived> bp_Arrived
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Arrived>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "bp_Arrived");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Arrived>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "bp_Arrived", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Arrived")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Arrived : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Arrived object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="dateCreate">Initial value of the DateCreate property.</param>
        public static bp_Arrived Createbp_Arrived(global::System.Guid userId, global::System.Guid placeId, global::System.DateTime dateCreate)
        {
            bp_Arrived bp_Arrived = new bp_Arrived();
            bp_Arrived.UserId = userId;
            bp_Arrived.PlaceId = placeId;
            bp_Arrived.DateCreate = dateCreate;
            return bp_Arrived;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                if (_PlaceId != value)
                {
                    OnPlaceIdChanging(value);
                    ReportPropertyChanging("PlaceId");
                    _PlaceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlaceId");
                    OnPlaceIdChanged();
                }
            }
        }
        private global::System.Guid _PlaceId;
        partial void OnPlaceIdChanging(global::System.Guid value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private global::System.DateTime _DateCreate;
        partial void OnDateCreateChanging(global::System.DateTime value);
        partial void OnDateCreateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Arrived_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Arrived_aspnet_Users", "aspnet_Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Arrived_bp_Place", "bp_Place")]
        public bp_Place bp_Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Place").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Place").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bp_Place> bp_PlaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Category")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Category : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Category object.
        /// </summary>
        /// <param name="categoryId">Initial value of the CategoryId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="views">Initial value of the Views property.</param>
        public static bp_Category Createbp_Category(global::System.Int32 categoryId, global::System.String name, global::System.Double views)
        {
            bp_Category bp_Category = new bp_Category();
            bp_Category.CategoryId = categoryId;
            bp_Category.Name = name;
            bp_Category.Views = views;
            return bp_Category;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
                if (_CategoryId != value)
                {
                    OnCategoryIdChanging(value);
                    ReportPropertyChanging("CategoryId");
                    _CategoryId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CategoryId");
                    OnCategoryIdChanged();
                }
            }
        }
        private global::System.Int32 _CategoryId;
        partial void OnCategoryIdChanging(global::System.Int32 value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Views
        {
            get
            {
                return _Views;
            }
            set
            {
                OnViewsChanging(value);
                ReportPropertyChanging("Views");
                _Views = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Views");
                OnViewsChanged();
            }
        }
        private global::System.Double _Views;
        partial void OnViewsChanging(global::System.Double value);
        partial void OnViewsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Place_bp_Category", "bp_Place")]
        public EntityCollection<bp_Place> bp_Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Place>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Place>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Comment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Comment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Comment object.
        /// </summary>
        /// <param name="commentId">Initial value of the CommentId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="content">Initial value of the Content property.</param>
        /// <param name="dateCreate">Initial value of the DateCreate property.</param>
        public static bp_Comment Createbp_Comment(global::System.Guid commentId, global::System.Guid userId, global::System.Guid placeId, global::System.String content, global::System.DateTime dateCreate)
        {
            bp_Comment bp_Comment = new bp_Comment();
            bp_Comment.CommentId = commentId;
            bp_Comment.UserId = userId;
            bp_Comment.PlaceId = placeId;
            bp_Comment.Content = content;
            bp_Comment.DateCreate = dateCreate;
            return bp_Comment;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CommentId
        {
            get
            {
                return _CommentId;
            }
            set
            {
                if (_CommentId != value)
                {
                    OnCommentIdChanging(value);
                    ReportPropertyChanging("CommentId");
                    _CommentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CommentId");
                    OnCommentIdChanged();
                }
            }
        }
        private global::System.Guid _CommentId;
        partial void OnCommentIdChanging(global::System.Guid value);
        partial void OnCommentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                OnPlaceIdChanging(value);
                ReportPropertyChanging("PlaceId");
                _PlaceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PlaceId");
                OnPlaceIdChanged();
            }
        }
        private global::System.Guid _PlaceId;
        partial void OnPlaceIdChanging(global::System.Guid value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private global::System.DateTime _DateCreate;
        partial void OnDateCreateChanging(global::System.DateTime value);
        partial void OnDateCreateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Comment_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Comment_aspnet_Users", "aspnet_Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Comment_bp_Place", "bp_Place")]
        public bp_Place bp_Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Place").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Place").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bp_Place> bp_PlaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bp_Place>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Like")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Like : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Like object.
        /// </summary>
        /// <param name="objectId">Initial value of the ObjectId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        public static bp_Like Createbp_Like(global::System.Guid objectId, global::System.Guid userId)
        {
            bp_Like bp_Like = new bp_Like();
            bp_Like.ObjectId = objectId;
            bp_Like.UserId = userId;
            return bp_Like;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ObjectId
        {
            get
            {
                return _ObjectId;
            }
            set
            {
                if (_ObjectId != value)
                {
                    OnObjectIdChanging(value);
                    ReportPropertyChanging("ObjectId");
                    _ObjectId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ObjectId");
                    OnObjectIdChanged();
                }
            }
        }
        private global::System.Guid _ObjectId;
        partial void OnObjectIdChanging(global::System.Guid value);
        partial void OnObjectIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateCreate;
        partial void OnDateCreateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateCreateChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Location")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Location : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Location object.
        /// </summary>
        /// <param name="locationId">Initial value of the LocationId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="latitude">Initial value of the Latitude property.</param>
        /// <param name="longitude">Initial value of the Longitude property.</param>
        /// <param name="dateCreate">Initial value of the DateCreate property.</param>
        public static bp_Location Createbp_Location(global::System.Guid locationId, global::System.Guid userId, global::System.Double latitude, global::System.Double longitude, global::System.DateTime dateCreate)
        {
            bp_Location bp_Location = new bp_Location();
            bp_Location.LocationId = locationId;
            bp_Location.UserId = userId;
            bp_Location.Latitude = latitude;
            bp_Location.Longitude = longitude;
            bp_Location.DateCreate = dateCreate;
            return bp_Location;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LocationId
        {
            get
            {
                return _LocationId;
            }
            set
            {
                if (_LocationId != value)
                {
                    OnLocationIdChanging(value);
                    ReportPropertyChanging("LocationId");
                    _LocationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LocationId");
                    OnLocationIdChanged();
                }
            }
        }
        private global::System.Guid _LocationId;
        partial void OnLocationIdChanging(global::System.Guid value);
        partial void OnLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Latitude
        {
            get
            {
                return _Latitude;
            }
            set
            {
                OnLatitudeChanging(value);
                ReportPropertyChanging("Latitude");
                _Latitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Latitude");
                OnLatitudeChanged();
            }
        }
        private global::System.Double _Latitude;
        partial void OnLatitudeChanging(global::System.Double value);
        partial void OnLatitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Longitude
        {
            get
            {
                return _Longitude;
            }
            set
            {
                OnLongitudeChanging(value);
                ReportPropertyChanging("Longitude");
                _Longitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Longitude");
                OnLongitudeChanged();
            }
        }
        private global::System.Double _Longitude;
        partial void OnLongitudeChanging(global::System.Double value);
        partial void OnLongitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private global::System.DateTime _DateCreate;
        partial void OnDateCreateChanging(global::System.DateTime value);
        partial void OnDateCreateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Location_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Location_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Location_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Location_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Location_aspnet_Users", "aspnet_Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Photo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Photo : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Photo object.
        /// </summary>
        /// <param name="photoId">Initial value of the PhotoId property.</param>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="path">Initial value of the Path property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="dateCreate">Initial value of the DateCreate property.</param>
        /// <param name="views">Initial value of the Views property.</param>
        public static bp_Photo Createbp_Photo(global::System.Guid photoId, global::System.Guid placeId, global::System.Guid userId, global::System.String path, global::System.String name, global::System.DateTime dateCreate, global::System.Double views)
        {
            bp_Photo bp_Photo = new bp_Photo();
            bp_Photo.PhotoId = photoId;
            bp_Photo.PlaceId = placeId;
            bp_Photo.UserId = userId;
            bp_Photo.Path = path;
            bp_Photo.Name = name;
            bp_Photo.DateCreate = dateCreate;
            bp_Photo.Views = views;
            return bp_Photo;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PhotoId
        {
            get
            {
                return _PhotoId;
            }
            set
            {
                if (_PhotoId != value)
                {
                    OnPhotoIdChanging(value);
                    ReportPropertyChanging("PhotoId");
                    _PhotoId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PhotoId");
                    OnPhotoIdChanged();
                }
            }
        }
        private global::System.Guid _PhotoId;
        partial void OnPhotoIdChanging(global::System.Guid value);
        partial void OnPhotoIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                OnPlaceIdChanging(value);
                ReportPropertyChanging("PlaceId");
                _PlaceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PlaceId");
                OnPlaceIdChanged();
            }
        }
        private global::System.Guid _PlaceId;
        partial void OnPlaceIdChanging(global::System.Guid value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Path
        {
            get
            {
                return _Path;
            }
            set
            {
                OnPathChanging(value);
                ReportPropertyChanging("Path");
                _Path = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Path");
                OnPathChanged();
            }
        }
        private global::System.String _Path;
        partial void OnPathChanging(global::System.String value);
        partial void OnPathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Descript
        {
            get
            {
                return _Descript;
            }
            set
            {
                OnDescriptChanging(value);
                ReportPropertyChanging("Descript");
                _Descript = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Descript");
                OnDescriptChanged();
            }
        }
        private global::System.String _Descript;
        partial void OnDescriptChanging(global::System.String value);
        partial void OnDescriptChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private global::System.DateTime _DateCreate;
        partial void OnDateCreateChanging(global::System.DateTime value);
        partial void OnDateCreateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Views
        {
            get
            {
                return _Views;
            }
            set
            {
                OnViewsChanging(value);
                ReportPropertyChanging("Views");
                _Views = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Views");
                OnViewsChanged();
            }
        }
        private global::System.Double _Views;
        partial void OnViewsChanging(global::System.Double value);
        partial void OnViewsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Photo_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Photo_aspnet_Users", "aspnet_Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Place")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Place : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Place object.
        /// </summary>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="categoryId">Initial value of the CategoryId property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="latitude">Initial value of the Latitude property.</param>
        /// <param name="longitude">Initial value of the Longitude property.</param>
        /// <param name="descript">Initial value of the Descript property.</param>
        /// <param name="dateCreate">Initial value of the DateCreate property.</param>
        /// <param name="views">Initial value of the Views property.</param>
        /// <param name="state">Initial value of the State property.</param>
        public static bp_Place Createbp_Place(global::System.Guid placeId, global::System.Guid userId, global::System.Int32 categoryId, global::System.String title, global::System.Double latitude, global::System.Double longitude, global::System.String descript, global::System.DateTime dateCreate, global::System.Double views, global::System.Int32 state)
        {
            bp_Place bp_Place = new bp_Place();
            bp_Place.PlaceId = placeId;
            bp_Place.UserId = userId;
            bp_Place.CategoryId = categoryId;
            bp_Place.Title = title;
            bp_Place.Latitude = latitude;
            bp_Place.Longitude = longitude;
            bp_Place.Descript = descript;
            bp_Place.DateCreate = dateCreate;
            bp_Place.Views = views;
            bp_Place.State = state;
            return bp_Place;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                if (_PlaceId != value)
                {
                    OnPlaceIdChanging(value);
                    ReportPropertyChanging("PlaceId");
                    _PlaceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlaceId");
                    OnPlaceIdChanged();
                }
            }
        }
        private global::System.Guid _PlaceId;
        partial void OnPlaceIdChanging(global::System.Guid value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
                OnCategoryIdChanging(value);
                ReportPropertyChanging("CategoryId");
                _CategoryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryId");
                OnCategoryIdChanged();
            }
        }
        private global::System.Int32 _CategoryId;
        partial void OnCategoryIdChanging(global::System.Int32 value);
        partial void OnCategoryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Latitude
        {
            get
            {
                return _Latitude;
            }
            set
            {
                OnLatitudeChanging(value);
                ReportPropertyChanging("Latitude");
                _Latitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Latitude");
                OnLatitudeChanged();
            }
        }
        private global::System.Double _Latitude;
        partial void OnLatitudeChanging(global::System.Double value);
        partial void OnLatitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Longitude
        {
            get
            {
                return _Longitude;
            }
            set
            {
                OnLongitudeChanging(value);
                ReportPropertyChanging("Longitude");
                _Longitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Longitude");
                OnLongitudeChanged();
            }
        }
        private global::System.Double _Longitude;
        partial void OnLongitudeChanging(global::System.Double value);
        partial void OnLongitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Descript
        {
            get
            {
                return _Descript;
            }
            set
            {
                OnDescriptChanging(value);
                ReportPropertyChanging("Descript");
                _Descript = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Descript");
                OnDescriptChanged();
            }
        }
        private global::System.String _Descript;
        partial void OnDescriptChanging(global::System.String value);
        partial void OnDescriptChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneNumber
        {
            get
            {
                return _PhoneNumber;
            }
            set
            {
                OnPhoneNumberChanging(value);
                ReportPropertyChanging("PhoneNumber");
                _PhoneNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneNumber");
                OnPhoneNumberChanged();
            }
        }
        private global::System.String _PhoneNumber;
        partial void OnPhoneNumberChanging(global::System.String value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WebSite
        {
            get
            {
                return _WebSite;
            }
            set
            {
                OnWebSiteChanging(value);
                ReportPropertyChanging("WebSite");
                _WebSite = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WebSite");
                OnWebSiteChanged();
            }
        }
        private global::System.String _WebSite;
        partial void OnWebSiteChanging(global::System.String value);
        partial void OnWebSiteChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreate
        {
            get
            {
                return _DateCreate;
            }
            set
            {
                OnDateCreateChanging(value);
                ReportPropertyChanging("DateCreate");
                _DateCreate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreate");
                OnDateCreateChanged();
            }
        }
        private global::System.DateTime _DateCreate;
        partial void OnDateCreateChanging(global::System.DateTime value);
        partial void OnDateCreateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Views
        {
            get
            {
                return _Views;
            }
            set
            {
                OnViewsChanging(value);
                ReportPropertyChanging("Views");
                _Views = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Views");
                OnViewsChanged();
            }
        }
        private global::System.Double _Views;
        partial void OnViewsChanging(global::System.Double value);
        partial void OnViewsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.Int32 _State;
        partial void OnStateChanging(global::System.Int32 value);
        partial void OnStateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Place_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Place_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Place_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Place_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Place_aspnet_Users", "aspnet_Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Place_bp_Category", "bp_Category")]
        public bp_Category bp_Category
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Category>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Category>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Category").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<bp_Category> bp_CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<bp_Category>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Category");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<bp_Category>("BestPlaceModel.FK_bp_Place_bp_Category", "bp_Category", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Comment_bp_Place", "bp_Comment")]
        public EntityCollection<bp_Comment> bp_Comment
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Comment>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Comment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Comment>("BestPlaceModel.FK_bp_Comment_bp_Place", "bp_Comment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Arrived_bp_Place", "bp_Arrived")]
        public EntityCollection<bp_Arrived> bp_Arrived
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<bp_Arrived>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Arrived");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<bp_Arrived>("BestPlaceModel.FK_bp_Arrived_bp_Place", "bp_Arrived", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="BestPlaceModel", Name="bp_Profile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class bp_Profile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new bp_Profile object.
        /// </summary>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="thirdPartyId">Initial value of the ThirdPartyId property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        public static bp_Profile Createbp_Profile(global::System.Guid userId, global::System.String thirdPartyId, global::System.DateTime dateCreated)
        {
            bp_Profile bp_Profile = new bp_Profile();
            bp_Profile.UserId = userId;
            bp_Profile.ThirdPartyId = thirdPartyId;
            bp_Profile.DateCreated = dateCreated;
            return bp_Profile;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Avatar
        {
            get
            {
                return _Avatar;
            }
            set
            {
                OnAvatarChanging(value);
                ReportPropertyChanging("Avatar");
                _Avatar = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Avatar");
                OnAvatarChanged();
            }
        }
        private global::System.String _Avatar;
        partial void OnAvatarChanging(global::System.String value);
        partial void OnAvatarChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PhoneNumber
        {
            get
            {
                return _PhoneNumber;
            }
            set
            {
                OnPhoneNumberChanging(value);
                ReportPropertyChanging("PhoneNumber");
                _PhoneNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PhoneNumber");
                OnPhoneNumberChanged();
            }
        }
        private global::System.String _PhoneNumber;
        partial void OnPhoneNumberChanging(global::System.String value);
        partial void OnPhoneNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Birthday
        {
            get
            {
                return _Birthday;
            }
            set
            {
                OnBirthdayChanging(value);
                ReportPropertyChanging("Birthday");
                _Birthday = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Birthday");
                OnBirthdayChanged();
            }
        }
        private Nullable<global::System.DateTime> _Birthday;
        partial void OnBirthdayChanging(Nullable<global::System.DateTime> value);
        partial void OnBirthdayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Gender
        {
            get
            {
                return _Gender;
            }
            set
            {
                OnGenderChanging(value);
                ReportPropertyChanging("Gender");
                _Gender = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Gender");
                OnGenderChanged();
            }
        }
        private Nullable<global::System.Boolean> _Gender;
        partial void OnGenderChanging(Nullable<global::System.Boolean> value);
        partial void OnGenderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Latitude
        {
            get
            {
                return _Latitude;
            }
            set
            {
                OnLatitudeChanging(value);
                ReportPropertyChanging("Latitude");
                _Latitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Latitude");
                OnLatitudeChanged();
            }
        }
        private Nullable<global::System.Double> _Latitude;
        partial void OnLatitudeChanging(Nullable<global::System.Double> value);
        partial void OnLatitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Longitude
        {
            get
            {
                return _Longitude;
            }
            set
            {
                OnLongitudeChanging(value);
                ReportPropertyChanging("Longitude");
                _Longitude = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Longitude");
                OnLongitudeChanged();
            }
        }
        private Nullable<global::System.Double> _Longitude;
        partial void OnLongitudeChanging(Nullable<global::System.Double> value);
        partial void OnLongitudeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ThirdPartyId
        {
            get
            {
                return _ThirdPartyId;
            }
            set
            {
                OnThirdPartyIdChanging(value);
                ReportPropertyChanging("ThirdPartyId");
                _ThirdPartyId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ThirdPartyId");
                OnThirdPartyIdChanged();
            }
        }
        private global::System.String _ThirdPartyId;
        partial void OnThirdPartyIdChanging(global::System.String value);
        partial void OnThirdPartyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("BestPlaceModel", "FK_bp_Profile_aspnet_Users", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("BestPlaceModel.FK_bp_Profile_aspnet_Users", "aspnet_Users", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
